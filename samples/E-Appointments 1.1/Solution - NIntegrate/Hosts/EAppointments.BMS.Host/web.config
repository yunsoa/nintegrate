<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"/>
		<section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging"/>
		<section name="dataConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Data.Configuration.DatabaseSettings, Microsoft.Practices.EnterpriseLibrary.Data"/>
		<section name="WorkflowRuntimeConfig" type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection, System.Workflow.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
		<sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
			<sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
				<section name="scriptResourceHandler" type="System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
				<sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
					<section name="jsonSerialization" type="System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="Everywhere"/>
					<section name="profileService" type="System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
					<section name="authenticationService" type="System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
					<section name="roleService" type="System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/></sectionGroup></sectionGroup></sectionGroup></configSections>
	<appSettings/>
	<connectionStrings>
		<add name="EAppointments" providerName="System.Data.SqlClient" connectionString="server=.;database=EAppointments;Integrated Security=true"/>
	</connectionStrings>
	<dataConfiguration defaultDatabase="EAppointments"/>
	<system.web>
		<compilation debug="true">
			<assemblies>
				<add assembly="SMDiagnostics, Version=3.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="Microsoft.Transactions.Bridge, Version=3.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.IdentityModel.Selectors, Version=3.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Transactions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Workflow.Activities, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add assembly="System.Workflow.ComponentModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add assembly="System.Workflow.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add assembly="Microsoft.Build.Framework, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="Microsoft.Build.Utilities, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="Microsoft.Build.Tasks, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
				<add assembly="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add assembly="System.Xml.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Data.DataSetExtensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/></assemblies>
		</compilation>
		<pages>
			<controls>
				<add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/></controls></pages>
		<httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="GET,HEAD" path="ScriptResource.axd" validate="false" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/></httpHandlers>
		<httpModules>
			<add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/></httpModules></system.web>
	<exceptionHandling>
		<exceptionPolicies>
			<!-- This is a custom policy for the Data Access assembly. It will wrap a SQLException to a DbLibException-->
			<add name="Data Access Policy">
				<exceptionTypes>
					<add name="SqlException" type="System.Data.SqlClient.SqlException, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<!-- Log the unhandled exception -->
							<!-- Uncomment this in case you want to enable logging
                <add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" logCategory="Default Category" eventId="100" severity="Error" title="BMSServices" priority="0" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"/>
              -->
							<add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="An error has occured in the SQL Server Database" wrapExceptionType="EAppointments.BMS.DataAccess.DBLibException, EAppointments.BMS.DataAccess"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<!-- This is a custom policy for the Business Layer assembly. It will wrap a Data Access Layer exception to BusinessException-->
			<add name="Business Layer Policy">
				<exceptionTypes>
					<add name="DbLibException" type="EAppointments.BMS.DataAccess.DBLibException, EAppointments.BMS.DataAccess" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<!-- Log the unhandled exception -->
							<!-- Uncomment this in case you want to enable logging
                <add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" logCategory="Default Category" eventId="100" severity="Error" title="BMSServices" priority="0" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"/>
              -->
							<add name="Wrap Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WrapHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" exceptionMessage="An error has occured in the Data Access Layer" wrapExceptionType=" EAppointments.BMS.BusinessException, EAppointments.BMS"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<!-- This is the default policy for WCF Exception Shielding that will log all exceptions that are not handled by the rest of the policies
           and will send a shielded exception back to the client -->
			<add name="WCF Exception Shielding">
				<exceptionTypes>
					<add name="Exception" type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<!-- Log the unhandled exception -->
							<add name="Logging Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" logCategory="Default Category" eventId="100" severity="Error" title="BMSServices" priority="0" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"/>
							<!-- Send the unhandled exception in a typed FaultException -->
							<!-- TODO: Create a strong name key for this dll -->
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.SystemFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<!-- All FaultExceptions will be sent directly to the client, bypassing the shielding and logging -->
					<add name="FaultException" type="System.ServiceModel.FaultException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException"/>
				</exceptionTypes>
			</add>
			<!-- Exception Policy for the AppointmentService -->
			<add name="AppointmentService">
				<exceptionTypes>
					<add name="DbLibException" type="EAppointments.BMS.DataAccess.DBLibException, EAppointments.BMS.DataAccess" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="BusinessException" type="EAppointments.BMS.BusinessException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="IdNotFoundException" type="EAppointments.BMS.IdNotFoundException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="BookingFailedException" type="EAppointments.BMS.BookingFailedException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="CancellationFailedException" type="EAppointments.BMS.CancellationFailedException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="InvalidBusinessOperationException" type="EAppointments.BMS.InvalidBusinessOperationException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="ArgumentNullException" type="System.ArgumentNullException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="SecurityException" type="System.Security.SecurityException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="SecurityAccessDeniedException" type="System.ServiceModel.Security.SecurityAccessDeniedException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.AppointmentServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<!-- Exception Policy for the DirectoryService -->
			<add name="DirectoryService">
				<exceptionTypes>
					<add name="DbLibException" type="EAppointments.BMS.DataAccess.DBLibException, EAppointments.BMS.DataAccess" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.DirectoryServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="BusinessException" type="EAppointments.BMS.BusinessException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.DirectoryServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="ArgumentNullException" type="System.ArgumentNullException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.DirectoryServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="SecurityException" type="System.Security.SecurityException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.DirectoryServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="SecurityAccessDeniedException" type="System.ServiceModel.Security.SecurityAccessDeniedException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.DirectoryServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
			<!-- Exception Policy for the ProviderService -->
			<add name="ProviderService">
				<exceptionTypes>
					<add name="DbLibException" type="EAppointments.BMS.DataAccess.DBLibException, EAppointments.BMS.DataAccess" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.ProviderServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="BusinessException" type="EAppointments.BMS.BusinessException, EAppointments.BMS" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.ProviderServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="ArgumentNullException" type="System.ArgumentNullException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.ProviderServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="SecurityException" type="System.Security.SecurityException, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.ProviderServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
					<add name="SecurityAccessDeniedException" type="System.ServiceModel.Security.SecurityAccessDeniedException, System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="ThrowNewException">
						<exceptionHandlers>
							<add name="FaultContractExceptionHandler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF.FaultContractExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.WCF" faultContractType="EAppointments.BMS.ServiceContracts.ProviderServiceFault, EAppointments.BMS.ServiceContracts"/>
						</exceptionHandlers>
					</add>
				</exceptionTypes>
			</add>
		</exceptionPolicies>
	</exceptionHandling>
	<!-- Logging configuration. All logs will be sent to the Event Log. -->
	<loggingConfiguration defaultCategory="Default Category" tracingEnabled="false">
		<logFilters>
			<add name="Category" type="Microsoft.Practices.EnterpriseLibrary.Logging.Filters.CategoryFilter, Microsoft.Practices.EnterpriseLibrary.Logging" categoryFilterMode="AllowAllExceptDenied">
				<categoryFilters/>
			</add>
		</logFilters>
		<categorySources>
			<add name="Default Category" switchValue="All">
				<listeners>
					<add name="Event Log Destination"/>
				</listeners>
			</add>
		</categorySources>
		<specialSources>
			<errors name="errors" switchValue="All">
				<listeners>
					<add name="Event Log Destination"/>
				</listeners>
			</errors>
		</specialSources>
		<listeners>
			<add name="Event Log Destination" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FormattedEventLogTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FormattedEventLogTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" source="E-Appointments ASAP Case Study Implementation" formatter="Default Formatter"/>
		</listeners>
		<formatters>
			<add name="Default Formatter" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging" template="Timestamp: {timestamp}&#xA;Message: {message}&#xA;Category: {category}&#xA;Priority: {priority}&#xA;EventId: {eventid}&#xA;Severity: {severity}&#xA;Title:{title}&#xA;Machine: {machine}&#xA;Application Domain: {appDomain}&#xA;Process Id: {processId}&#xA;Process Name: {processName}&#xA;Win32 Thread Id: {win32ThreadId}&#xA;Thread Name: {threadName}&#xA;Extended Properties: {dictionary({key} - {value}&#xA;)}"/>
		</formatters>
	</loggingConfiguration>
	<WorkflowRuntimeConfig>
		<Services>
			<add type="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService, System.Workflow.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>
			<add type="System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService, System.Workflow.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" ConnectionString="Initial Catalog=EAppointments_WF;Data Source=.;Integrated Security=true;" UnLoadOnIdle="true"/>
			<add type="System.Workflow.Runtime.Tracking.SqlTrackingService, System.Workflow.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" ConnectionString="Initial Catalog=EAppointments_WF;Data Source=.;Integrated Security=true;" IsTransactional="false" UseDefaultProfile="true" TrackXomlDocument="True"/>
			<add type="System.Workflow.Runtime.Hosting.SharedConnectionWorkflowCommitWorkBatchService, System.Workflow.Runtime, Version=3.0.00000.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" ConnectionString="Initial Catalog=EAppointments_WF;Data Source=.;Integrated Security=true;"/>
		</Services>
	</WorkflowRuntimeConfig>
	<system.codedom>
			<compilers>
				<compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CSharp.CSharpCodeProvider,System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" warningLevel="4">
					<providerOption name="CompilerVersion" value="v3.5"/>
					<providerOption name="WarnAsError" value="false"/></compiler>
				<compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.VisualBasic.VBCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" warningLevel="4">
					<providerOption name="CompilerVersion" value="v3.5"/>
					<providerOption name="OptionInfer" value="true"/>
					<providerOption name="WarnAsError" value="false"/></compiler></compilers></system.codedom>
	<system.webServer>
			<validation validateIntegratedModeConfiguration="false"/>
		<modules>
			<remove name="ScriptModule"/>
			<add name="ScriptModule" preCondition="managedHandler" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/></modules>
		<handlers>
			<remove name="WebServiceHandlerFactory-Integrated"/>
			<remove name="ScriptHandlerFactory"/>
			<remove name="ScriptHandlerFactoryAppServices"/>
			<remove name="ScriptResource"/>
			<add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ScriptResource" verb="GET,HEAD" path="ScriptResource.axd" preCondition="integratedMode" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/></handlers></system.webServer>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Extensions" publicKeyToken="31bf3856ad364e35"/>
				<bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="3.5.0.0"/></dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Extensions.Design" publicKeyToken="31bf3856ad364e35"/>
				<bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="3.5.0.0"/></dependentAssembly></assemblyBinding></runtime></configuration>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Runtime.Serialization;
using NIntegrate.Data.Configuration;
using System.Reflection;
using NIntegrate.Mapping;

namespace NIntegrate.Data
{
    [DataContract(Namespace = "http://nintegrate.com")]
    [KnownType("KnownTypes")]
    public sealed class ObjectId<TRecord, TQuery>
        where TRecord : ActiveRecord
        where TQuery : QueryTable, new()
    {
        [DataMember]
        private readonly Condition _condition;
        [DataMember]
        private readonly bool _autoGenerated;

        #region Properties

        public bool AutoGenerated
        {
            get { return _autoGenerated; }
        }

        #endregion

        #region KnownTypes

        static Type[] KnownTypes()
        {
            return KnownTypeRegistry.Instance.KnownTypes;
        }

        #endregion

        public ObjectId(Condition condition, bool autoGenerated)
        {
            if (Equals(condition, null))
                throw new ArgumentNullException("condition");

            _condition = condition;
            _autoGenerated = autoGenerated;
        }

        public QueryCriteria ToCriteria()
        {
            var query = ActiveRecord<TRecord, TQuery>.Q;
            return new QueryCriteria(query.TableName, query.ConnectionStringName, query.ReadOnly, query.PredefinedColumns)
                .Where(_condition);
        }
    }

    [DataContract(Namespace = "http://nintegrate.com")]
    public abstract class ActiveRecord
    {
        [DataMember]
        protected bool _isNew = true;

        protected QueryCommandFactory _cmdFactory;

        protected static readonly MapperFactory _mapperFac = new MapperFactory();

        public void Attach(QueryCommandFactory cmdFactory)
        {
            _cmdFactory = cmdFactory;
        }

        internal ActiveRecord() { }

        public bool IsNew()
        {
            return _isNew;
        }

        public bool IsAttached()
        {
            return _cmdFactory != null;
        }

        public abstract bool Save(params Assignment[] assignments);

        public abstract bool Delete();
    }

    [DataContract(Namespace = "http://nintegrate.com")]
    public abstract class ActiveRecord<TRecord, TQuery> : ActiveRecord
        where TRecord : ActiveRecord
        where TQuery : QueryTable, new()
    {
        public static readonly TQuery Q = new TQuery();
        private static readonly Mapper<IDataReader, TRecord> _mapperOne;
        private static readonly Mapper<IDataReader, List<TRecord>> _mapperMany;

        #region Constructors

        static ActiveRecord()
        {
            _mapperFac.ConfigureMapper<IDataReader, TRecord>(true, true, true, "Q");
            _mapperOne = _mapperFac.GetMapper<IDataReader, TRecord>();

            _mapperFac.ConfigureMapper<IDataReader, List<TRecord>>(true, true, true);
            _mapperMany = _mapperFac.GetMapper<IDataReader, List<TRecord>>();
        }

        #endregion

        #region Public Methods

        public abstract ObjectId<TRecord, TQuery> GetObjectId();
        public abstract Assignment[] GetSaveAssignments();

        public virtual Assignment[] GetInsertAssignments()
        {
            return GetSaveAssignments();
        }

        public virtual void SetAutoGeneratedIdValue(params object[] values)
        {
            //only to be implemented in child class for saveable AutoGenerated ID ActiveRecord
        }

        public sealed override bool Save(params Assignment[] assignments)
        {
            if (!IsAttached())
                return false;

            bool result = false;

            var objectId = GetObjectId();
            var criteria = objectId.ToCriteria();
            criteria.QueryType = (IsNew() ? QueryType.Insert : QueryType.Update);

            if (assignments != null && assignments.Length > 0)
                criteria.SetAssignments(assignments);
            else if (criteria.QueryType == QueryType.Insert)
                criteria.SetAssignments(GetInsertAssignments());
            else
                criteria.SetAssignments(GetSaveAssignments());

            if (criteria.QueryType == QueryType.Insert && objectId.AutoGenerated)
            {
                using (var cmd = _cmdFactory.CreateCommand(criteria, false, true))
                {
                    using (var conn = cmd.Connection)
                    {
                        conn.Open();
                        var autoGeneratedId = cmd.ExecuteScalar();
                        result = (autoGeneratedId != DBNull.Value && autoGeneratedId != null);

                        if (result)
                        {
                            SetAutoGeneratedIdValue(autoGeneratedId);
                        }
                    }
                }
            }
            else
            {
                using (var cmd = _cmdFactory.CreateCommand(criteria, false))
                {
                    using (var conn = cmd.Connection)
                    {
                        conn.Open();
                        result = cmd.ExecuteNonQuery() > 0;
                    }
                }
            }

            if (result)
            {
                _isNew = false;
            }

            return result;
        }

        public sealed override bool Delete()
        {
            if (!IsAttached())
                return false;

            bool result = false;

            var criteria = GetObjectId().ToCriteria();
            criteria.QueryType = QueryType.Delete;
            using (var cmd = _cmdFactory.CreateCommand(criteria, false))
            {
                using (var conn = cmd.Connection)
                {
                    conn.Open();
                    result = cmd.ExecuteNonQuery() > 0;
                }
            }

            if (result)
            {
                _isNew = true;
            }

            return result;
        }

        public TRecord FindOne(ObjectId<TRecord, TQuery> id)
        {
            if (id == null)
                return FindOne((QueryCriteria)null);

            var criteria = id.ToCriteria();
            criteria.QueryType = QueryType.Select;
            return FindOne(criteria);
        }

        public TRecord FindOne(QueryCriteria criteria)
        {
            if (!IsAttached() || criteria == null || criteria.TableName != Q.TableName
                || (criteria.QueryType != QueryType.Select && criteria.QueryType != QueryType.Sproc))
            {
                return default(TRecord);
            }

            using (var cmd = _cmdFactory.CreateCommand(criteria, false))
            {
                using (var conn = cmd.Connection)
                {
                    conn.Open();
                    using (var rdr = cmd.ExecuteReader())
                    {
                        if (rdr.Read())
                        {
                            var one = _mapperOne(rdr);
                            one.Attach(_cmdFactory);
                            return one;
                        }
                    }
                }
            }

            return default(TRecord);
        }

        public ICollection<TRecord> FindMany(QueryCriteria criteria)
        {
            if (!IsAttached() || criteria == null || criteria.TableName != Q.TableName
                || (criteria.QueryType != QueryType.Select && criteria.QueryType != QueryType.Sproc))
            {
                return null;
            }

            using (var cmd = _cmdFactory.CreateCommand(criteria, false))
            {
                using (var conn = cmd.Connection)
                {
                    conn.Open();
                    using (var rdr = cmd.ExecuteReader())
                    {
                        var many = _mapperMany(rdr);
                        if (many != null)
                        {
                            foreach (var one in many)
                            {
                                one.Attach(_cmdFactory);
                            }
                        }
                        return many;
                    }
                }
            }

            return null;
        }

        #endregion
    }
}
